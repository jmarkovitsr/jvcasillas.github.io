install_github('jimhester/knitrBootstrap')
library(devtools)
install_github('jimhester/knitrBootstrap')
options(rstudio.markdownToHTML =
function(inputFile, outputFile) {
system(paste("pandoc", "-s -S -i -t Slidy --mathjax", shQuote(inputFile), "-o", shQuote(outputFile)))
}
)
options(rstudio.markdownToHTML =
function(inputFile, outputFile) {
system(paste("pandoc", "-s -S -i -t Slidy --mathjax", shQuote(inputFile), "-o", shQuote(outputFile)))
}
)
install.packages("Rgitbook")
gitbookInfo()
devtools::install_github('jbryer/Rgitbook')
gitbookInfo()
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library(Rgitbook)
library(Rgitbook)
# generate 40 participants
participant <- 1:40
participants <- rep(participant,24)
participants <- sort(participants)
# Assign participants to two groups (cat/sp)
# factor called 'bil' (bilingual)
bil <- c(rep("cat", 480),rep("sp", 480))
df <- as.data.frame(cbind(participants,bil))
# Create factor etimology (etm)
# 3 levels (b, v, v>b)
df$etm <- c(rep("b", 8), rep("v", 8), rep("vb", 8))
df$etm <- as.factor(df$etm)
# Create 8 items for each level of 'etm'
# Note: items have been repeated 4 times, these averages
# are included here already
df$items <- c("b1","b2","b3","b4","b5","b6","b7","b8",
"v1","v2","v3","v4","v5","v6","v7","v8",
"vb1","vb2","vb3","vb4","vb5","vb6","vb7","vb8")
df$items <- as.factor(df$items)
# sort rows of dataframe
df <- df[with(df, order(bil, etm)), ]
# Generate percents (proportion of [v] production)
set.seed(1)
propcatb <- rnorm(160, 20, 5)
propcatv <- rnorm(160,92, 3)
propcatvb <- rnorm(160, 20, 5)
propspb <- rnorm(160, 10, 2)
propspv <- rnorm(160,35, 5)
propspvb <- rnorm(160, 50, 10)
df$prop <- c(propcatb,
propcatv,
propcatvb,
propspb,
propspv,
propspvb)
df <- df[with(df, order(participants, bil, etm)), ]
library(lattice)
bwplot(prop ~ etm|bil, data = df)
aov.prop = aov(prop ~ bil * etm + Error(participants/etm), data=df)
summary(aov.prop)
postb = subset(df,etm=="b")
# Make subset
postv = subset(df,etm=="v")
# Make subset
postvb = subset(df,etm=="vb")
View(postb)
ttestb <- t.test(prop ~ bil, data=postb)
summary(ttestb)
ttestb
TukeyHSD(aov(prop ~ bil, data=postb))
ttestb <- t.test(prop ~ bil, paired=TRUE, data=postb)
ttestb
t.test(prop ~ vil, paired=T, alternative="less", data=postb)
t.test(prop ~ bil, paired=T, alternative="less", data=postb)
t.test(prop ~ bil, paired=F, alternative="less", data=postb)
aov.postb = aov(prop ~ bil, data=postb)
summary(aov.postb)
summary(aov.prop)
summary(aov.postb)
gitbookInfo()
set.seed(1)
vot <- rnorm(100,15,5)
phon <- "t"
stress <- c(rep("stressed",50),rep("unstressed",50))
df1 <- data.frame(phon,stress,vot)
vot <- rnorm(100,-60,15)
phon <- "d"
df2 <- data.frame(phon,stress,vot)
df <- rbind(df1, df2)
summary(df)
plot(vot~phon,data=df)
plot(df$stress,df$vot)
plot(df$vot,df$stress)
par(mfrow=c(1,2)) # 1 row, 2 cols
plot(as.numeric(df$phon),df$vot,  axes = F, type="n",
ylim=c(-100,30), xlim=c(0.8,2.20), ylab="vot", xlab="phon", main="") # base plot, no data
box() # add box
axis(side = 1, at=(1:2), labels=c("stressed","unstressed")) # add x axis
axis(side=2,las=1, at=seq(-100, 30, by=20)) # add y axis
points(df$phon[df$phon=="t"], df$vot[df$phon=="t"], col="blue", cex=2) # add data /t/
points(df$phon[df$phon=="d"], df$vot[df$phon=="d"], col="red", cex=2) # add data /d/
plot(vot~phon,data=df) # add second plot
plot(vot~phon*stress,data=df) # won't work
plot(vot~phon*stress,data=df) # won't work
plot(vot~phon|stress,data=df) # won't work
library(lattice)
bwplot(vot~phon|stress,data=df) # the only way to do this in base R is with subsets and par
histogram(vot,data=df)
stripplot(vot~phon,data=df)
dotplot(vot~stress,data=df)
x <- rnorm(100)
y <- x + rnorm(100, sd = 0.5)
f <- gl(2, 50, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f)
trellis.device(color = FALSE)
xyplot(y ~ x | f,
panel = function(x, y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, col = 2)
})
library(ggplot2)
qplot(phon,vot,data=df)
qplot(phon,vot,data=df, color=stress)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(vot, data = df, fill = phon) # histogram
qplot(vot, data = df, fill = stress) # historgram
qplot(vot, data = df, geom = "density") # kernal density
qplot(vot, data = df, geom = "density", color=phon) # kernal density
qplot(log(vot), data = df, geom = "density", color=stress) # kernal density with transform
qplot(phon, vot, data=df, facets = .~stress)
qplot(vot, data = df, facets = stress~., binwidth = 3)
g <- ggplot(df, aes(phon, vot))
g + geom_point()
g + geom_point(aes(color = stress), size = 4, alpha = 1/4)
var1 <- rnorm(200,200,20)
var1 <- data.frame(var1)
df2 <- cbind(df,var1)
g2 <- ggplot(df2,aes(var1,vot))
g2 + geom_point(aes(color = phon), size = 4, alpha = 1/2) + facet_grid(phon)
df2
g2 <- ggplot(df2,aes(var1,vot))
g2 + geom_point(aes(color = phon), size = 4, alpha = 1/2) + facet_grid(phon)
df2
g2 <- ggplot(df2,aes(var1,vot))
g2 + geom_point(aes(color = phon), size = 4, alpha = 1/2) + facet_grid(stress)
g2 <- ggplot(df2,aes(var1,vot))
g2 + geom_point(aes(color = phon), size = 4, alpha = 1/2) + facet_grid(phon)
g2 <- ggplot(df2,aes(var1,vot))
g2 + geom_point(aes(color = phon), size = 4, alpha = 1/2) + facet_grid(df2$phon)
g2 <- ggplot(df2,aes(var1,vot))
g2 + geom_point(aes(color = phon), size = 4, alpha = 1/2)
g2 <- ggplot(df2,aes(var1,vot))
g2 + geom_point(aes(color = phon), size = 4, alpha = 1/2)
+ facet_grid(phon)
g2 <- ggplot(df2,aes(var1,vot))
g2 + geom_point(aes(color = phon), size = 4, alpha = 1/2)
+ facet_wrap(phon)
g2 <- ggplot(df2,aes(var1,vot))
g2 + geom_point(aes(color = phon), size = 4, alpha = 1/2)
+ facet_grid(~phon)
g2 <- ggplot(df2,aes(var1,vot))
g2 + geom_point(aes(color = phon), size = 4, alpha = 1/2)
+ facet_grid(~ stress)
g2 <- ggplot(df2,aes(var1,vot))
g2 + geom_point(aes(color = phon), size = 4, alpha = 1/2) +
facet_grid(~ stress)
g2 <- ggplot(df2,aes(var1,vot))
g2 + geom_point(aes(color = phon), size = 4, alpha = 1/2) +
facet_wrap(~ stress)
trellis.device(color = FALSE)
xyplot(y ~ x | f,
panel = function(x, y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, col = 2)
})
trellis.device(color = TRUE)
xyplot(y ~ x | f,
panel = function(x, y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, col = 2)
})
xyplot(y ~ x | f,
panel = function(x, y, ...) {
panel.xyplot(x, y, ...)
panel.lmline(x, y, col = 2)
})
plot(df$stress~df$vot)
rnorm(100,15,5)
vot <- sort(vot, decreasing=FALSE)
vot
vot <- rnorm(100,15,5)
vot
vot <- sort(vot, decreasing=FALSE)
vot
set.seed(1)
vot1 <- rnorm(100,15,5)
vot1 <- sort(vot, decreasing=FALSE)
phon <- "t"
stress <- c(rep("stressed",50),rep("unstressed",50))
df1 <- data.frame(phon,stress,vot1)
vot2 <- rnorm(100,-60,15)
vot2 <- sort(vot2, decreasing=FALSE)
phon <- "d"
df2 <- data.frame(phon,stress,vot2)
df <- rbind(df1, df2)
summary(df)
df
set.seed(1)
vot <- rnorm(100,15,5)
vot <- sort(vot, decreasing=FALSE)
phon <- "t"
stress <- c(rep("stressed",50),rep("unstressed",50))
df1 <- data.frame(phon,stress,vot)
vot <- rnorm(100,-60,15)
vot <- sort(vot, decreasing=FALSE)
phon <- "d"
df2 <- data.frame(phon,stress,vot)
df <- rbind(df1, df2)
summary(df)
df
require(devtools)
install_github('poirot', 'ramnathv')
install_github('slidify', 'ramnathv', ref = 'dev')
install_github('slidifyLibraries', 'ramnathv')
require(devtools)
install_github('poirot', 'ramnathv')
install_github('slidify', 'ramnathv', ref = 'dev')
install_github('slidifyLibraries', 'ramnathv')
setwd("~/Desktop/poirotBlog")
blogify("posts")
library(poirot)
blogify("posts")
blogify("posts")
blogify("posts")
blogify("posts")
blogify("posts")
setwd("~/Desktop/jvcasill.github.io")
blogify("_posts")
blogify("_posts")
blogify("_posts")
blogify("_posts")
blogify("_posts")
blogify("_posts")
blogify("_posts")
blogify("_posts")
blogify("_posts")
blogify("_posts")
setwd("~/Sites/jvcasill.github.io")
blogify("_posts")
blogify("_posts")
blogify("_posts")
blogify("_posts")
blogify("_posts")
blogify("_posts")
blogify("_posts")
blogify("_posts")
blogify("_posts")
getwd()
blogify("_posts")
blogify("_posts")
blogify("_posts")
blogify(".")
blogify(".")
blogify(".")
options(rstudio.markdownToHTML =
function(inputFile, outputFile) {
system(paste("pandoc", "-s -S -i -t Slidy --mathjax", shQuote(inputFile), "-o", shQuote(outputFile)))
}
)
options(rstudio.markdownToHTML =
function(inputFile, outputFile) {
system(paste("pandoc", "-s -S -i -t Slidy --mathjax", shQuote(inputFile), "-o", shQuote(outputFile)))
}
)
blogify(".")
blogify(".")
blogify(".")
blogify(".")
blogify(".")
setwd("~/Desktop/poirotBlog")
blogify(".")
blogify("posts")
blogify("posts")
setwd("~/Sites/jvcasill.github.io")
blogify(".")
