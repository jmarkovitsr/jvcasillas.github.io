library(ggplot2)
library(gridExtra)
options(tikzLatexPackages = c(getOption("tikzLatexPackages"),
"\\usepackage{tipa}"))
tikz("/Users/casillas/Dropbox/shared/L2_vowel_perception/project_folder/manuscript/figures/prop.tex", standAlone=TRUE, width=7, height=5)
# create plots
plot1 <-qplot(a_word, a_meanprop, geom="bar", stat="identity", fill = I("grey50")) + ylim(0, 1) + labs(list(title = "/a/", x = "", y = "Proportion"))
plot2 <-qplot(e_word, e_meanprop, geom="bar", stat="identity", fill = I("grey50")) + ylim(0, 1) + labs(list(title = "/e/", x = "", y = "Proportion"))
plot3 <-qplot(i_word, i_meanprop, geom="bar", stat="identity", fill = I("grey50")) + ylim(0, 1) + labs(list(title = "/i/", x = "", y = "Proportion"))
# combine plots
sidebysideplot <- grid.arrange(plot1, plot2, plot3, ncol=3)
dev.off()
## @knitr prop_graph
# make subsets by vowel and get averages
a = subset(proportion,vowel=="a")
a_meanprop <- tapply(a$avg, a$word, mean)
a_word <- factor(levels(a$word), levels = levels(a$word))
e = subset(proportion,vowel=="e")
e_meanprop <- tapply(e$avg, e$word, mean)
e_word <- factor(levels(e$word), levels = levels(e$word))
i = subset(proportion,vowel=="i")
i_meanprop <- tapply(i$avg, i$word, mean)
i_word <- factor(levels(i$word), levels = levels(i$word))
require(tikzDevice)
library(ggplot2)
library(gridExtra)
options(tikzLatexPackages = c(getOption("tikzLatexPackages"),
"\\usepackage{tipa}"))
tikz("/Users/casillas/Dropbox/shared/L2_vowel_perception/project_folder/manuscript/figures/prop.tex", standAlone=TRUE, width=7.5, height=5.5)
# create plots
plot1 <-qplot(a_word, a_meanprop, geom="bar", stat="identity", fill = I("grey50")) + ylim(0, 1) + labs(list(title = "/a/", x = "", y = "Proportion"))
plot2 <-qplot(e_word, e_meanprop, geom="bar", stat="identity", fill = I("grey50")) + ylim(0, 1) + labs(list(title = "/e/", x = "", y = "Proportion"))
plot3 <-qplot(i_word, i_meanprop, geom="bar", stat="identity", fill = I("grey50")) + ylim(0, 1) + labs(list(title = "/i/", x = "", y = "Proportion"))
# combine plots
sidebysideplot <- grid.arrange(plot1, plot2, plot3, ncol=3)
dev.off()
coronals_data <- read.delim("~/Google Drive/11_fall_2013/classes/span_583c_phonetics_3_fall_2013/trabajo_final/coronals/manuscript/coronals_data.txt", quote="")
boxplot(vot~phon*group, data=coronals_data, horizontal=TRUE, legend=T, xlab="VOT", ylab="Phoneme", ylim=c(-.275,.275), main="VOT - all")
boxplot(vot~phon*group, data=coronals_data, horizontal=TRUE, legend=T, xlab="VOT", ylab="Phoneme/Group", ylim=c(-.275,.275), main="VOT - all")
hw1_data <- read.csv("~/Google Drive/11_fall_2013/classes/coursera/hw1_data.csv")
View(hw1_data)
head(hw1_data)
hw1_data$Ozone(47,)
hw1_data$Ozone[47,]
hw1_data[47,1]
hw1_data(is.na[,1]
)
hw1_data[,1]
test <- hw1_data[,1]
test
fix(test)
x <- hw1_data[hw1_mydata$Ozone > 31]
x <- hw1_data[hw1_data$Ozone > 31]
x <- hw1_data(hw1_data$Ozone > 31)
x <- subset(hw1_data, "Ozone" > 31)
x
y <- subset(x, "Temp" > 90)
y
View(y)
x = subset(hw1_data,Ozone > 31)
View(x)
y = subset(x,Temp > 90)
View(y)
mean(y$Solar.R)
View(hw1_data)
x = subset(hw1_data,Month == 5)
View(x)
mean(x$Temp)
x = subset(hw1_data,Month == 6)
mean(x$Temp)
x = subset(hw1_data,Month == 5)
View(x)
library(lme4)
# create subjects
subjects = rep(1:10, each=20)
subjects = as.factor(subjects)
# add condition
condition = rep(1:20,10)
# give subj a random intercept
sub_int = rnorm(10,sd=4)
sub_int = rep(sub_int,each=20)
# add an effect
effect = rep(1:20*2,10)
# add some noise
noise = rnorm(length(subjects))
mydf = data.frame(subjects, condition, sub_int, effect, noise)
mydf$response = sub_int + effect + noise
#  mydf_for_real = mydf[,c(1,2,ncol(mydf))]
xmdl = lmer(response ~ condition + (1|subjects), mydf)
joseph_mydf <- read.csv("~/Desktop/r/course_data/joseph_mydf.csv")
View(joseph_mydf)
xmdl = lmer(response ~ condition + (1|subjects), joseph_mydf)
xmdl = lmer(response ~ condition + (1|subjects), joseph_mydf)
install.packages("twitteR")
library("twitteR", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
###
### Read tweets from Twitter using ATOM (XML) format
###
# installation is required only required once and is rememberd across sessions
install.packages('XML')
# loading the package is required once each session
require(XML)
# initialize a storage variable for Twitter tweets
mydata.vectors <- character(0)
# paginate to get more tweets
for (page in c(1:15))
{
# search parameter
twitter_q <- URLencode('#prolife OR #prochoice')
# construct a URL
twitter_url = paste('http://search.twitter.com/search.atom?q=',twitter_q,'&rpp=100&page=', page, sep='')
# fetch remote URL and parse
mydata.xml <- xmlParseDoc(twitter_url, asText=F)
# extract the titles
mydata.vector <- xpathSApply(mydata.xml, '//s:entry/s:title', xmlValue, namespaces =c('s'='http://www.w3.org/2005/Atom'))
# aggregate new tweets with previous tweets
mydata.vectors <- c(mydata.vector, mydata.vectors)
}
library("twitterR")
library("wordcloud")
library("tm")
cred <- OAuthFactory$new(consumerKey='XXX',
consumerSecret='XXX',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='http://api.twitter.com/oauth/access_token',
authURL='http://api.twitter.com/oauth/authorize')
cred$handshake(cainfo="cacert.pem")
#save for later use for Windows
save(cred, file="twitter authentication.Rdata")
registerTwitterOAuth(cred)
s=searchTwitter('GOOG',cainfo="cacert.pem")
s[[1]]
me <- getUser("manjeetjakhar", cainfo="cacert.pem")
me$getId()
me$getFriends(n=6, cainfo="cacert.pem") #get six friend list
m_tweets=userTimeline('manjeetjakhar',n=6,cainfo="cacert.pem") #look in to users tweet
m_tweets
trend <- availableTrendLocations(cainfo="cacert.pem")
load("/Users/casillas/Desktop/twitter authentication.Rdata")
library(twitteR)
library(ROAuth)
library(plyr)
library(stringr)
library(ggplot2)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL = "http://api.twitter.com/oauth/access_token"
authURL = "http://api.twitter.com/oauth/authorize"
consumerKey = "xxxxxxxxxxxxxxxxxxxxxxx"
consumerSecret = "xxxxxxxxxxxxxxxxxxxxxxxxxxx"
Cred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
Cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl") )
4170932
save(Cred, file="twitter authentication.Rdata")
registerTwitterOAuth(Cred)
load("/Users/casillas/Desktop/twitter authentication.Rdata")
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL = "http://api.twitter.com/oauth/access_token"
authURL = "http://api.twitter.com/oauth/authorize"
consumerKey = "xxxxxxxxxxxxxxxxxxxxxxx"
consumerSecret = "xxxxxxxxxxxxxxxxxxxxxxxxxxx"
Cred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
Cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl") )
4170932
save(Cred, file="twitter authentication.Rdata")
registerTwitterOAuth(Cred)
load("/Users/casillas/Desktop/twitter authentication.Rdata")
View(mydf)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL = "http://api.twitter.com/oauth/access_token"
authURL = "http://api.twitter.com/oauth/authorize"
consumerKey = "84XjUk5P7paCByyQPdLMhQ"
consumerSecret = "KGsT6wlW6NZ0mUGoUa8ovLrvMcUqMzDOC3HeLgEkw"
Cred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
Cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl") )
save(Cred, file="twitter authentication.Rdata")
registerTwitterOAuth(Cred)
load("/Users/casillas/Desktop/twitter authentication.Rdata")
Cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl") )
Cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl") )
accessURL = "http://api.twitter.com/oauth/access_token"
authURL = "http://api.twitter.com/oauth/authorize"
consumerKey = "84XjUk5P7paCByyQPdLMhQ"
consumerSecret = "KGsT6wlW6NZ0mUGoUa8ovLrvMcUqMzDOC3HeLgEkw"
Cred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
Cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl") )
Cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl") )
load("/Users/casillas/Desktop/twitter authentication.Rdata")
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL = "http://api.twitter.com/oauth/access_token"
authURL = "http://api.twitter.com/oauth/authorize"
consumerKey = "84XjUk5P7paCByyQPdLMhQ"
consumerSecret = "KGsT6wlW6NZ0mUGoUa8ovLrvMcUqMzDOC3HeLgEkw"
Cred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
load("/Users/casillas/Desktop/twitter authentication.Rdata")
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL = "http://api.twitter.com/oauth/access_token"
authURL = "http://api.twitter.com/oauth/authorize"
consumerKey = "84XjUk5P7paCByyQPdLMhQ"
consumerSecret = "KGsT6wlW6NZ0mUGoUa8ovLrvMcUqMzDOC3HeLgEkw"
Cred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
Cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl") )
Rangers.list <- searchTwitter('#Rangers', n=1000, cainfo="cacert.pem")
Rangers.df = twListToDF(Rangers.list)
write.csv(Rangers.df, file='C:/temp/RangersTweets.csv', row.names=F)
Athletics.list <- searchTwitter('#Athletics', n=1000, cainfo="cacert.pem")
Athletics.df = twListToDF(Athletics.list)
write.csv(Athletics.df, file='C:/temp/AthleticsTweets.csv', row.names=F)
MLB.list <- searchTwitter('#MLB', n=1000, cainfo="cacert.pem")
MLB.df = twListToDF(MLB.list)
write.csv(MLB.df, file='C:/temp/MLBTweets.csv', row.names=F)
save(Cred, file="twitter authentication.Rdata")
registerTwitterOAuth(Cred)
Cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl") )
library("tikzDevice", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
View(coronals_data)
hubbs = read.delim("~/Desktop/hubbs/Book1.txt", header=TRUE)
summary(hubbs)
mean <- aggregate(Score ~ Language, data = hubbs, FUN = mean)
sd <- aggregate(Score ~ Language, data = hubbs, FUN = sd)
mean
sd
boxplot(hubbs$Score~hubbs$Language, data=hubbs, ylim=c(0,25), ylab="Score", xlab="Language")
lm <- lm(Score~Language, data=hubbs)
summary(lm)
boxplot(hubbs$Score,hubbs$Language, data=hubbs, ylim=c(0,25), ylab="Score", xlab="Language")
plot(hubbs$Score,hubbs$Language, data=hubbs, ylim=c(0,25), ylab="Score", xlab="Language")
plot(hubbs$Score, data=hubbs, ylim=c(0,25), ylab="Score", xlab="Language")
abline(lm)
df = read.delim("~/Desktop/hubbs/data.txt", header=TRUE)
summary(df)
plot(hubbs$english, data=df, ylim=c(0,25), ylab="Score", xlab="Language")
plot(hubbs$english, data=df, xlim=c(0,25), ylim=c(0,25), ylab="Score", xlab="Language")
plot(hubbs$english, hubbs$chinese, data=df, xlim=c(0,25), ylim=c(0,25), ylab="Score", xlab="Language")
plot(df$english, df$chinese, data=df, xlim=c(0,25), ylim=c(0,25), ylab="Score", xlab="Language")
abline(lm)
plot(df$english~df$chinese, data=df, xlim=c(0,25), ylim=c(0,25), ylab="Score", xlab="Language")
abline(lm)
plot(df$english~df$chinese, data=df, xlim=c(0,25), ylim=c(0,25), ylab="chinese", xlab="english")
plot(df$english~df$chinese, data=df, xlim=c(0,25), ylim=c(0,25), ylab="chinese", xlab="english", col=c("red", "green"))
plot(df$chinese~df$english, data=df, xlim=c(0,25), ylim=c(0,25), ylab="chinese", xlab="english", col=c("red", "green"))
lm2 <- lm(df$chinese~df$english, data=df)
summary(lm2)
abline(lm2)
lm2 <- lm(df$chinese,df$english, data=df)
plot(df$english~df$chinese, data=df, xlim=c(0,25), ylim=c(0,25), ylab="chinese", xlab="english", col=c("red", "green"))
abline(lm)
plot(df$english, data=df, xlim=c(0,25), ylim=c(0,25), ylab="chinese", xlab="english", col=c("red", "green"))
plot(df$english, data=df, xlim=c(0,25), ylim=c(0,25), ylab="chinese", xlab="english", col=c("red"))
plot(df$english, df$chinese, data=df, xlim=c(0,25), ylim=c(0,25), ylab="chinese", xlab="english", col=c("red"))
plot(df$chinese, df$english, data=df, xlim=c(0,25), ylim=c(0,25), ylab="chinese", xlab="english", col=c("red"))
plot(df$chinese, df$english, data=df, xlim=c(0,25), ylim=c(0,25), ylab="chinese", xlab="english", col=c("red","green"))
plot(df$chinese~df$english, data=df, xlim=c(0,25), ylim=c(0,25), ylab="chinese", xlab="english", col=c("red","green"))
plot(df$english~df$chinese, data=df, xlim=c(0,25), ylim=c(0,25), ylab="chinese", xlab="english", col=c("red","green"))
plot(df$english,df$chinese, data=hubbs, xlim=c(0,25), ylim=c(0,25), ylab="chinese", xlab="english", col=c("red","green"))
plot(df$chinese,df$english, data=hubbs, xlim=c(0,25), ylim=c(0,25), ylab="chinese", xlab="english", col=c("red","green"))
plot(Score~Language, data=hubbs, xlim=c(0,25), ylim=c(0,25), ylab="chinese", xlab="english", col=c("red","green"))
plot(Score~Language, data=hubbs, xlim=c(0,2), ylim=c(0,25), ylab="Score", xlab="Language", col=c("red","green"))
plot(Score~Language, data=hubbs, xlim=c(0,4), ylim=c(0,25), ylab="Score", xlab="Language", col=c("red","green"))
plot(Score~Language, data=hubbs, xlim=c(0,3), ylim=c(0,25), ylab="Score", xlab="Language", col=c("red","green"))
abline(lm)
meanchin <- mean(hubbs$Chinese)
meanchin
meanchin <- mean(df$Chinese)
meanchin <- mean(df$chinese)
meanchin
meaneng <- mean(df$english)
mean <- mean(hubbs$Score)
hubbs$score.norm <- hubbs$Score-mean
summary(hubbs)
lm <- lm(score.norm~Language, data=hubbs)
summary(lm)
plot(Score~Language, data=hubbs, xlim=c(0,3), ylim=c(0,25), ylab="Score", xlab="Language", col=c("red","green"))
abline(lm)
swirl()
runModule()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
swirl()
update_swirl()
swirl()
install.packages("Cairo")
library("lme4", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
pyramid.plot <- function(x,
g,
main = paste("Pyramid plot of",
deparse(substitute(x)), "by",
deparse(substitute(g))),
xlab = paste(deparse(substitute(g)), "(",
levels(g)[1], "/",
levels(g)[2],")"),
ylab = deparse(substitute(x))
)
{
tab <- table(x, g)
tab[ ,1] <- -tab[ ,1]
barplot(tab,
horiz = TRUE,
beside = TRUE,
space = c(0, -nrow(tab)),
names.arg = c(dimnames(tab)$x, dimnames(tab)$x),
xlim = c(min(tab) * 1.1, max(tab) * 1.1),
col = "white",
main = main,
xlab = xlab,
ylab = ylab
)
}
left.side <- c(107092, 113053, 121163, 112209, 106543, 72895, 46920, 32606, 11106, 1134, 60, 5247)
right.side <- c(102129, 109261, 123291, 117322, 110397, 71027, 50319, 43805, 21074, 3621, 204, 6608)
pyramid.plot <- function(x,
g,
main = paste("Pyramid plot of",
deparse(substitute(x)), "by",
deparse(substitute(g))),
xlab = paste(deparse(substitute(g)), "(",
levels(g)[1], "/",
levels(g)[2],")"),
ylab = deparse(substitute(x))
)
{
tab <- table(x, g)
tab[ ,1] <- -tab[ ,1]
barplot(tab,
horiz = TRUE,
beside = TRUE,
space = c(0, -nrow(tab)),
names.arg = c(dimnames(tab)$x, dimnames(tab)$x),
xlim = c(min(tab) * 1.1, max(tab) * 1.1),
col = "white",
main = main,
xlab = xlab,
ylab = ylab
)
}
pyramid.plot(left.side,right.side)
# Make the canvas
plot(1:10,1:10,xlim=c(-5,5),ylim=c(0,10),type="n",xlab="",ylab="",xaxt="n",yaxt="n")
# Make the branches
rect(-1,0,1,2,col="tan3",border="tan4",lwd=3)
polygon(c(-5,0,5),c(2,4,2),col="palegreen3",border="palegreen4",lwd=3)
polygon(c(-4,0,4),c(3.5,5.5,3.5),col="palegreen4",border="palegreen3",lwd=3)
polygon(c(-3,0,3),c(5,6.5,5),col="palegreen3",border="palegreen4",lwd=3)
polygon(c(-2,0,2),c(6.25,7.5,6.25),col="palegreen4",border="palegreen3",lwd=3)
#Add some ornaments
points(x=runif(4,-5,5),y=rep(2,4),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=19)
points(x=runif(4,-4,4),y=rep(3.5,4),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=19)
points(x=runif(4,-3,3),y=rep(5,4),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=19)
points(x=runif(4,-2,2),y=rep(6.25,4),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=19)
points(0,7.5,pch=8,cex=5,col="gold",lwd=3)
# Add some presents
xPres = runif(10,-4.5,4.5)
xWidth = runif(10,0.1,0.5)
xHeight=runif(10,0,1)
for(i in 1:10){
rect(xPres[i]-xWidth[i],0,xPres[i]+xWidth[i],xHeight[i],col=sample(c("blue","red"),size=1))
rect(xPres[i]-0.2*xWidth[i],0,xPres[i]+0.2*xWidth[i],xHeight[i],col=sample(c("gold","grey87"),size=1))
}
install.packages("vowels")
vowels <- load.vowels("http://ncslaap.lib.ncsu.edu/tools/norm/downloads/CentralOhioNORM.txt")
vowelplot(vowels, color="vowels", label="vowels")
vowelplot(norm.bark(vowels), speaker="JOHG09", color="vowels", color.choice=rainbow(length(unique(vowels[,2]))), label="none", title="JOHG09 Bark Difference Normalized Vowels")
add.spread.vowelplot(norm.bark(vowels), speaker="JOHG09", sd.mult=1, color.choice=rainbow(length(unique(vowels[,2]))), color="vowels", leg=TRUE)
library(vowels)
vowels <- load.vowels("http://ncslaap.lib.ncsu.edu/tools/norm/downloads/CentralOhioNORM.txt")
vowelplot(vowels, color="vowels", label="vowels")
vowelplot(norm.bark(vowels), speaker="JOHG09", color="vowels", color.choice=rainbow(length(unique(vowels[,2]))), label="none", title="JOHG09 Bark Difference Normalized Vowels")
add.spread.vowelplot(norm.bark(vowels), speaker="JOHG09", sd.mult=1, color.choice=rainbow(length(unique(vowels[,2]))), color="vowels", leg=TRUE)
par(mfrow=c(2,1))
vowelplot(compute.means(vowels), shape="vowels")
vowelplot(compute.means(norm.lobanov(vowels)), shape="vowels")
par(mfrow=c(1,1))
g09.means <- compute.means(vowels, speaker="JOHG09")
vowelplot(g09.means, color="vowels", labels="none")
add.spread.vowelplot(vowels, speaker="JOHG09", sd.mult=1, color="vowels", labels="none")
# can add annotations to the vowel plots as any other R graph, eg:
legend("top", legend="Can you guess which vowel is 'BOY'?", col='lightslategrey', bty="n")
vowelplot(norm.nearey(vowels), speaker="JOHG09", color="speakers", labels="vowels", title="Individual vowels and means for JOHG09\nNearey1 Normalized")
add.vowelplot(compute.means(norm.nearey(vowels), speaker="JOHG09"), color=NA, size=2, labels="vowels")
vowelplot(norm.wattfabricius(vowels), speaker="JOHG09", shape="vowels", color="vowels", color.choice=sample(colors(), length(unique(vowels[,2]))), leg="vowels", title="Randomly colored vowels for JOHG09\nWatt & Fabricious normalized")
vowelplot(norm.bark(vowels), speaker="JOHG09", color="vowels", color.choice=rainbow(length(unique(vowels[,2]))), label="none", title="JOHG09 Bark Difference Normalized Vowels")
add.spread.vowelplot(norm.bark(vowels), speaker="JOHG09", sd.mult=1, color.choice=rainbow(length(unique(vowels[,2]))), color="vowels", leg=TRUE)
vowels <- load.vowels("http://ncslaap.lib.ncsu.edu/tools/norm/downloads/CentralOhioNORM.txt")
means <- compute.means(vowels)
vowelplot(means, color="vowels", labels="vowels")
install.packages("multcomp")
install.packages("popbio")
install.packages("googleVis")
install.packages("pdflatex")
install.packages(c("e1071", "GGally", "gtools", "slam", "swirl", "tm"))
options(rstudio.markdownToHTML =
function(inputFile, outputFile) {
system(paste("pandoc", "-s -S -i -t Slidy --mathjax", shQuote(inputFile), "-o", shQuote(outputFile)))
}
)
options(rstudio.markdownToHTML =
function(inputFile, outputFile) {
system(paste("pandoc", "-s -S -i -t Slidy --mathjax", shQuote(inputFile), "-o", shQuote(outputFile)))
}
)
options(rstudio.markdownToHTML =
function(inputFile, outputFile) {
system(paste("pandoc", "-s -S -i -t Slidy --mathjax", shQuote(inputFile), "-o", shQuote(outputFile)))
}
)
library(phonTools)
setwd("~/Desktop")
sound = loadsound("welcome.wav")
spectrogram(sound, fs = 44100, gridlines = FALSE, colors=TRUE, output=FALSE, zoom=FALSE, pause=FALSE)
spectrogram(sound, fs = 44100, gridlines = FALSE, colors = TRUE, maintitle = Welcome,
output = FALSE, zoom = FALSE, pause = FALSE)
spectrogram (sound, fs = 22050, windowlength = 5,
timestep = -500, padding = 10,
preemphasisf = 50, maxfreq = 5000, colors = TRUE,
dynamicrange = 50, nlevels = dynamicrange, maintitle = "",
show = TRUE, window = 'kaiser', windowparameter = 3,
quality = FALSE)
spectrogram (sound, fs = 44100, windowlength = 5,
padding = 10,
maxfreq = 5000, colors = TRUE,
dynamicrange = 50, nlevels = dynamicrange, maintitle = "",
show = TRUE, window = 'kaiser', windowparameter = 3,
quality = FALSE)
spectrogram (sound, fs = 44100, windowlength = 5,
padding = 10,
maxfreq = 6000, colors = TRUE,
dynamicrange = 50, nlevels = dynamicrange, maintitle = "",
show = TRUE, window = 'kaiser', windowparameter = 3,
quality = FALSE)
data (pb52)
par (mfrow = c(1,4), mar = c(4.2,4.2,1,1))
# standard layout with linear axes
vowelplot (pb52$f1, pb52$f2, pb52$vowel, xsampa = TRUE)
vowelplot (pb52$f1, pb52$f2, pb52$vowel, logaxes = 'xy',
meansOnly = TRUE, xsampa = TRUE)
## A few examples of some vowel plots.
data (pb52)
par (mfrow = c(1,4), mar = c(4.2,4.2,1,1))
# standard layout with linear axes
vowelplot (pb52$f1, pb52$f2, pb52$vowel, xsampa = TRUE)
# alternate layout with log axes
vowelplot (pb52$f1, pb52$f2, pb52$vowel, logaxes = 'xy',
alternateAxes = TRUE, xsampa = TRUE)
# category means only
vowelplot (pb52$f1, pb52$f2, pb52$vowel, logaxes = 'xy',
meansOnly = TRUE, xsampa = TRUE)
# category means only with standard deviation ellipses
vowelplot (pb52$f1, pb52$f2, pb52$vowel, logaxes = 'xy', meansOnly = TRUE,
ellipses = TRUE, xsampa = TRUE)
spectrogram (sound, quality = TRUE)
spectrogram (sound, quality = TRUE)
par (mfrow = c(1,1)
spectrogram (sound, fs = 44100, windowlength = 5,
padding = 10,
maxfreq = 6000, colors = TRUE,
dynamicrange = 50, nlevels = dynamicrange, maintitle = "",
show = TRUE, window = 'kaiser', windowparameter = 3,
quality = FALSE)
spectrogram (sound, fs = 44100, windowlength = 5,
padding = 10,
maxfreq = 6000, colors = TRUE,
dynamicrange = 50, nlevels = dynamicrange, maintitle = "",
show = TRUE, window = 'kaiser', windowparameter = 3,
quality = FALSE)
View(pb52)
par (mfrow = c(1,1))
spectrogram (sound, fs = 44100, windowlength = 5,
padding = 10,
maxfreq = 6000, colors = TRUE,
dynamicrange = 50, nlevels = dynamicrange, maintitle = "",
show = TRUE, window = 'kaiser', windowparameter = 3,
quality = FALSE)
options(rstudio.markdownToHTML =
function(inputFile, outputFile) {
system(paste("pandoc", "-s -S -i -t Slidy --mathjax", shQuote(inputFile), "-o", shQuote(outputFile)))
}
)
options(rstudio.markdownToHTML =
function(inputFile, outputFile) {
system(paste("pandoc", "-s -S -i -t Slidy --mathjax", shQuote(inputFile), "-o", shQuote(outputFile)))
}
)
options(rstudio.markdownToHTML =
function(inputFile, outputFile) {
system(paste("pandoc", "-s -S -i -t Slidy --mathjax", shQuote(inputFile), "-o", shQuote(outputFile)))
}
)
getwd()
setwd("~/Desktop/test")
getwd()
