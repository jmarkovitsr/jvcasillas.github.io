hist(Dom, xlim=range(5)
)
ident = read.delim("/Users/casillas/Desktop/sweave_stats_all/identificacion_all%.txt")
summary(ident)
attach(ident)
meet = subset(ident,contrast=="meet")
pot = subset(ident,contrast=="pot")
ship = subset(ident,contrast=="ship")
axb = read.delim("/Users/casillas/Desktop/sweave_stats_all/axb_all.txt")
summary(axb)
attach(axb)
table(answer,group)
brplot(table(answer,group))
barplot(table(answer,group))
barplot(table(answer,group), beside=T)
potpat = subset(axb,contrast=="pot-pat")
potpat = subset(axb,contrast=="pot_pat")
summary(potpat)
attach(potpat)
barplot(table(answer,group), beside=T)
meetmet = subset(axb, contrast=="meet_met)
meetmet = subset(axb, contrast=="meet_met")
summary(meetmet)
meetmet = subset(axb, contrast=="met_meet")
summary(meetmet)
attach(meetmet)
barplot(table(answer,group), beside=T)
shipsheep = subset(axb, contrast=="ship_sheep")
summary(shipsheep)
attach(shipsheep)
barplot(table(answer,group), beside=T)
lexd = read.delim("/Users/casillas/Desktop/sweave_stats_all/lexical_decision_all.txt")
summary(lexd)
attach(lexd)
barplot(table(answer,group), beside=T)
barplot(table(Answer,Group), beside=T)
barplot(table(dPrime,Group), beside=T)
barplot(table(dPrime,Group), beside=T, legends=T)
barplot(table(dPrime,Group), beside=T, legend=T)
barplot(table(dPrime,Group), legend=T)
barplot(table(dPrime,Group), beside=T, legend=T)
barplot(table(dPrime,Group), beside=T, legends=T)
barplot(table(Answer,Group), beside=T)
ident = read.delim("/Users/casillas/Desktop/sweave_stats_all/identificacion_all_proportion.txt")
ident = read.delim("/Users/casillas/Desktop/sweave_stats_all/identification_all_proportion.txt")
summary(ident)
meet = subset(ident,contrast=="meet")
pot = subset(ident,contrast=="pot")
ship = subset(ident,contrast=="ship")
hist(meet)
hist(meet,proportion)
interaction.plot(stimulus, group, jitter(percent,1), xlab="Pair", ylab="Discriminability /i-Éª/", main="")
interaction.plot(stimulus, group, jitter(percent,1), xlab="Stimulus", ylab="%Sheep", main="")
interaction.plot(stimulus, group, jitter(percent,1), xlab="Stimulus", ylab="%Mate", main="")
ident$stimulus = as.factor(ident$stimulus)
interaction.plot(stimulus, group, jitter(percent,1), xlab="Stimulus", ylab="%Mate", main="")
summary(ident)
library(Rcmdr)
help(plot)
2 + 2
sqrt(9)
library(languageR)
summary(axb)
dummy = subset(identPROP, Grupo=="BTard")
identRT = read.delim("/Users/casillas/Desktop/sweave_stats_all/identification_all_RT.txt")
identPROP = read.delim("/Users/casillas/Desktop/sweave_stats_all/identification_all_proportion.txt")
dummy = subset(identPROP, Grupo=="BTard")
summary(dummy)
attach(dummy)
library(Design)
library(Design package)
lrm(Proporcion~Estimulo,data=dummy)
library(languageR)
lrm(Proporcion~Estimulo,data=dummy)
glm(Proporcion~Estimulo,data=dummy,family=binomial)
summary(dummy)
btard= dummy
summary(btard)
btemp = subset(identPROP,Grupo=="BTemp")
summary(btemp)
mono = subset(identPROP,Grupo=="Mono")
summary(mono)
glm(Proporcion~Estimulo,data=btard,family=binomial)
glm(Proporcion~Estimulo,data=btemp,family=binomial)
glm(Proporcion~Estimulo,data=mono,family=binomial)
mono = subset(mono,Contraste=="meet")
btemp = subset(btemp,Contraste=="meet")
btard = subset(btard,Contraste=="meet")
glm(Proporcion~Estimulo,data=mono,family=binomial)
glm(Proporcion~Estimulo,data=btemp,family=binomial)
glm(Proporcion~Estimulo,data=btard,family=binomial)
mono = subset(mono,Contraste=="pot")
btemp = subset(btemp,Contraste=="pot")
btard = subset(btard,Contraste=="pot")
glm(Proporcion~Estimulo,data=btard,family=binomial)
summary(identPROP)
btard_pot = subset(identPROP,Contraste=="pot" && Grupo=="BTard")
summary(btard_pot)
btard_pot = subset(identPROP,Contraste=="pot" & Grupo=="BTard")
summary(btard_pot)
btemp_pot = subset(identPROP,Contraste=="pot" & Grupo=="BTemp")
summary(btemp_pot)
mono_pot = subset(identPROP,Contraste=="pot" & Grupo=="Mono")
summary(mono_pot)
glm(Proporcion~Estimulo,data=btard_pot,family=binomial)
glm(Proporcion~Estimulo,data=btemp_pot,family=binomial)
glm(Proporcion~Estimulo,data=mono_pot,family=binomial)
Sweave('/Users/casillas/Desktop/newtestagain/untitled.Snw')
getwd()
Sweave('/Users/casillas/Desktop/newtestagain/untitled.Snw')
texi2pdf('/Users/casillas/Desktop/newtestagain/untitled.Snw')
Sweave('/Users/casillas/Desktop/newtestagain/untitled.Snw')
Sweave('/Users/casillas/Dropbox/Public/Tesis/Thesis_MA_UA/metodologia.tex')
vowels <- load.vowels("http://ncslaap.lib.ncsu.edu/tools/norm/downloads/CentralOhioNORM.txt")
vowels <- load.vowels("http://ncslaap.lib.ncsu.edu/tools/norm/downloads/CentralOhioNORM.txt")#
vowelplot(vowels, color="vowels", label="vowels")
library(Rcmndr)
library(Rcmdr)
scatterplot(F1~F2 | vowel.frame, reg.line=FALSE, smooth=FALSE, spread=FALSE,#
   boxplots=FALSE, span=0.5, by.groups=TRUE, data=btemp, xlim=c(3000, 500), ylim=c(1200, 400))
scatterplot(F1~F2 | vowel.frame, reg.line=FALSE, smooth=FALSE, spread=FALSE,#
   boxplots=FALSE, span=0.5, by.groups=TRUE, data=mono, xlim=c(3000, 500), ylim=c(1200, 400))
windows(w=4,h=4,pointsize=12)
plotMeans(mono$F2, mono$vowel.frame, error.bars="se", xlim=c(3000, 500), ylim=c(1200, 400))
plotMeans(mono$F2, mono$vowel.frame, error.bars="se", ylim=c(1200, 400))
summary(mono
)
amono=subset(mono, vowel.frame=="a")
summary(amono
)
aemono=subset(mono, vowel.frame=="ae")
summary(aemono)
summary(btemp)
abtemp=subset(btemp, vowel.frame=="a")
summary(abtemp)
aebtemp=subset(btemp, vowel.frame=="ae")
summary(aebtemp)
sd(amono)
sd(aemono)
sd(abtemp)
sd(aebtemp)
amono <- 811.1
aemono <- 932.4
plot(amono, aemono)
plot(amono, aemono, xlim=c(3000, 500), ylim=c(1200, 400))
amono <- 811.1, 1243
amono <- "811.1", "1243"
amono <- "811.1" "1243"
amono <- 811.1 1243
scatterplot(F1~F2 | vowel.frame, reg.line=FALSE, smooth=FALSE, spread=FALSE,#
   boxplots=FALSE, span=0.5, by.groups=TRUE, data=mono)
, xlim=c(3000, 500), ylim=c(1200, 400)
scatterplot(F1~F2 | vowel.frame, reg.line=FALSE, smooth=FALSE, spread=FALSE,#
   boxplots=FALSE, span=0.5, by.groups=TRUE, data=mono, xlim=c(3000, 500), ylim=c(1200, 400))
help(scatterplot
)
plot(F1~F2 | vowel.frame, reg.line=FALSE, smooth=FALSE, spread=FALSE,#
   boxplots=FALSE, span=0.5, by.groups=TRUE, data=mono, xlim=c(3000, 500), ylim=c(1200, 400))
scatterplot(F1~F2 | vowel.frame, reg.line=FALSE, smooth=FALSE, spread=FALSE,#
   boxplots=FALSE, span=0.5, by.groups=TRUE, data=mono, xlim=c(3000, 500), ylim=c(1200, 400))
help(plot)
require(stats)
plot(cars)
lines(lowess(cars))
plot(sin, -pi, 2*pi) # see ?plot.function
plot(table(rpois(100,5)), type = "h", col = "red", lwd=10,#
     main="rpois(100,lambda=5)")
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")#
points(x, cex = .5, col = "dark red")
plot(cars)
plotmeans(F1~F2 | vowel.frame, reg.line=FALSE, smooth=FALSE, spread=FALSE,#
   boxplots=FALSE, span=0.5, by.groups=TRUE, data=mono, xlim=c(3000, 500), ylim=c(1200, 400))
library(gplots)
plotmeans(F1~F2 | vowel.frame, reg.line=FALSE, smooth=FALSE, spread=FALSE,#
   boxplots=FALSE, span=0.5, by.groups=TRUE, data=mono, xlim=c(3000, 500), ylim=c(1200, 400))
plotmeans(F1~F2, data=mono, xlim=c(3000, 500), ylim=c(1200, 400))
plotmeans(F1~F2, data=mono)
data(state)
plotmeans(state.area ~ state.region)
plotVowels.R#
# Script for plotting vowel formants in a hertz space and then #
# in an ERB space, making the x- and y-axes cover the same range.#
#
# Start by setting the working directory to the directory where #
# you have the txt file containing the vowel formant values that#
# you want to plot (and where you want to store the output pictures.#
# Change the path name as below.  #
setwd('c:/Lx600.01')#
#
# Read in the data as a data frame.  This assumes that you have #
# a file with three tab-separated columns, that looks something#
# like this, which is the contents of the sampleVowels.txt file#
# that is linked into the course web page.  Change the file name #
# as appropriate.#
##
# vowel	F1_Hz	F2_Hz#
# [i]	360	2400#
# [e]	680	1900#
# [a]	800	1300#
# [o]	590	900#
# [u]	390	900#
formants=data.frame(read.table("sampleVowels.txt",header=TRUE,sep="\t"))#
#
# Make two new columns that are the ERB values for these formants, #
# and name them appropriately.  The formula for calculating ERB here #
# is taken from the following locus classicus:#
#   Moore, B., & Glasberg, B.R. (1987). "Formulae describing frequency#
#   selectivity as a function of frequency and level, and their use #
#   in calculating excitation patterns." Hearing Research, 28, 209-225.#
# ERB stands for "equivalent rectangular bandwidth" and is a slightly #
# modified timbre scale that is close to Barks, differing mostly in #
# low frequencies.  #
formants$F1_ERB=#
	11.17*log(((formants$F1_Hz/1000)+0.312)/((formants$F1_Hz/1000)+14.675))+43#
formants$F2_ERB=#
	11.17*log(((formants$F2_Hz/1000)+0.312)/((formants$F2_Hz/1000)+14.675))+43#
#
# Set up a window that is 6" wide by 6" high, using 12point type.#
windows(w=6,h=6,pointsize=12)#
# Specify plotting parameters to make the font be a serif font and #
# make the plot be square, and have no outside margin around the plot.#
par(family="serif",pty="s",oma=rep(0,4))#
#
# Plot the formants in hertz space, with the x-axis going from #
# 2500 to 900 and the y-axis going from 1400 to 0.#
plot(formants$F2_Hz,formants$F1_Hz,xlim=c(2500,900),ylim=c(1500,0),#
	xlab="second formant measured at vowel mid point (Hz)",#
	ylab="first formant measured at vowel mid point (Hz)",pch=19)#
# Add text to label the points.#
text(formants$F2_Hz,formants$F1_Hz,formants$vowel,adj=c(1.5,0))#
#
# Save the plot to a file of type "wmf" (for Windows Metafile).  #
# Specify "ps" if you want to a Postscript file, "pdf" if you #
# want a PDF file, and so on.  Type help(savePlot) to get more #
# options and to understand the syntax of this command.#
savePlot("formantsHz",type="wmf")#
#
# Now plot the formants in ERB #
# space, with the x-axis going from #
# 23 to 14 and the y-axis going from 15 to 6.#
plot(formants$F2_ERB,formants$F1_ERB,xlim=c(23,14),ylim=c(15,6),#
	xlab="second formant measured at vowel mid point (ERB)",#
	ylab="first formant measured at vowel mid point (ERB)",pch=19)#
# Add text to label the points.#
text(formants$F2_ERB,formants$F1_ERB,formants$vowel,adj=c(1.5,0))#
#
# Save the plot to a file of type "wmf" (for Windows Metafile).  #
# Specify "ps" if you want to a Postscript file, "pdf" if you #
# want a PDF file, and so on.  Type help(savePlot) to get more #
# options and to understand the syntax of this command.#
savePlot("formantsERB",type="wmf")
plotVowels(data=myDataFrame, vowel='Vowel_column_name', f1=#
'F1_column_name', f2='F2_column_name', f3='F3_column_name',#
f0='f0_column_name', grouping.factor='Gender_column_name',#
norm.method='mel', match.unit=TRUE, match.axes='absolute',#
points='shape', means='text', points.alpha=0.3, means.alpha=1,#
points.cex=0.6, means.cex=1.2, ignore.hidden=TRUE, ellipses=TRUE,#
ellipse.alpha=0.3173, polygon=TRUE, poly.order=c('i','e','a','o','u'),#
poly.include=NULL, single.plot=TRUE, titles='auto', axis.titles=#
'auto', axis.cex=0.8, garnish.col='#666666FF', grayscale=FALSE,#
vary.colors=TRUE, vary.shapes=TRUE, vary.lines=TRUE, legend='TRUE',#
output='pdf', family='FreeSerif', pointsize=12, units='in',#
width=6.5, height=6.5, res=72, asp=NULL)
library(phonR)#
aeall <- read.delim("~/Desktop/sweave_stats_all/prod_ae_all.txt")#
summary(aeall)#
attach(aeall)#
aebtardmono=subset(aeall,speaker==c("Mono","BTard"))#
summary(aebtardmono)#
attach(aebtardmono)#
aebtempmono=subset(aeall,speaker==c("Mono","BTemp"))#
summary(aebtempmono)#
attach(aebtempmono)
plotVowels(data=aebtardmono, vowel='vowel', f1='F1', f2='F2', grouping.factor='speaker', #
match.unit=TRUE, match.axes='absolute', points='text', means='text', single.plot=FALSE, #
output='screen', polygon=TRUE, poly.order=c('a','Ã¦'), grayscale=TRUE, #
titles=c('Vocales bajas de BTard','Vocales bajas de Mono'), axis.titles=c('F2 (Bark)','F1 (Bark)'), #
axis.cex=0.9, pointsize=12, units='in', width=6.5, height=6.5, res=72,)
par(mfrow=c(2,1))
plotVowels(data=aebtardmono, vowel='vowel', f1='F1', f2='F2', grouping.factor='speaker', #
match.unit=TRUE, match.axes='absolute', points='text', means='text', single.plot=FALSE, #
output='screen', polygon=TRUE, poly.order=c('a','Ã¦'), grayscale=TRUE, #
titles=c('Vocales bajas de BTard','Vocales bajas de Mono'), axis.titles=c('F2 (Bark)','F1 (Bark)'), #
axis.cex=0.9, pointsize=12, units='in', width=6.5, height=6.5, res=72,)
plotVowels(data=aebtempmono, vowel='vowel', f1='F1', f2='F2', grouping.factor='speaker', #
match.unit=TRUE, match.axes='absolute', points='text', means='text', single.plot=FALSE, #
output='screen', polygon=TRUE, poly.order=c('a','Ã¦'), grayscale=TRUE, #
titles=c('Vocales bajas de BTemp','Vocales bajas de Mono'), axis.titles=c('F2 (Bark)','F1 (Bark)'), #
axis.cex=0.9, pointsize=12, units='in', width=6.5, height=6.5, res=72,)
plotVowels(data=aebtardmono, vowel='vowel', f1='F1', f2='F2', grouping.factor='speaker', #
match.unit=TRUE, match.axes='absolute', points='text', means='text', single.plot=FALSE, #
output='screen', polygon=TRUE, poly.order=c('a','Ã¦'), grayscale=TRUE, #
titles=c('Vocales bajas de BTard','Vocales bajas de Mono'), axis.titles=c('F2 (Bark)','F1 (Bark)'), #
axis.cex=0.9, pointsize=12, units='in', width=6.5, height=6.5, res=72,)
par(mfrow=c(2,1))
plotVowels(data=aebtempmono, vowel='vowel', f1='F1', f2='F2', grouping.factor='speaker', #
match.unit=TRUE, match.axes='absolute', points='text', means='text', single.plot=FALSE, #
output='screen', polygon=TRUE, poly.order=c('a','Ã¦'), grayscale=TRUE, #
titles=c('Vocales bajas de BTemp','Vocales bajas de Mono'), axis.titles=c('F2 (Bark)','F1 (Bark)'), #
axis.cex=0.9, pointsize=12, units='in', width=6.5, height=6.5, res=72,)
library(tikzDevice)
install.packages("tikzDevice", repos="http://R-Forge.R-project.org")
library(tikzDevice)
library(cairo_pdf)
library(cairo)
Sys.getenv("R_USER")
pdf()
names(pdfFonts())
tryCatch(par(family="Doulos SIL"),error=par(family="serif"))#
plot(1,1,xlab="É½",ylab="É¾")
tryCatch(par(family="Times"),error=par(family="serif"))#
plot(1,1,xlab="É½",ylab="É¾")
tryCatch(par(family="Times"),error=par(family="serif"))#
plot(1,1,xlab="Éª",ylab="É¾")
cairo <- function(name, width, height, ...)#
  grDevices::cairo_pdf(file = paste(name, "pdf", sep = "."),#
                       width = width, height = height)
getwd()
cairo <- function(name, width, height, ...)#
  grDevices::cairo_pdf(file = paste(name, "pdf", sep = "."),#
                       width = width, height = height)
grid.text("\u4F60\u597D", y=2/3, gp=gpar(fontfamily="CNS1"))
diff --git a/src/library/utils/R/SweaveDrivers.R b/src/library/utils/R/SweaveDrivers.R#
index 7336e7d..ca4b557 100644#
--- a/src/library/utils/R/SweaveDrivers.R#
+++ b/src/library/utils/R/SweaveDrivers.R#
@@ -60,7 +60,7 @@ RweaveLatexSetup <-#
     options <- list(prefix = TRUE, prefix.string = prefix.string,#
                     engine = "R", print = FALSE, eval = TRUE, fig = FALSE,#
-                    pdf = TRUE, eps = FALSE, png = FALSE, jpeg = FALSE,#
+                    pdf = TRUE, cairo=FALSE, eps = FALSE, png = FALSE, jpeg = FALSE,#
                     grdevice = "", width = 6, height = 6, resolution = 300,#
                     term = TRUE, echo = TRUE, keep.source = TRUE,#
                     results = "verbatim",#
@@ -98,6 +98,9 @@ makeRweaveLatexCodeRunner <- function(evalFunc = RweaveEvalWithOpt)#
                            version = options$pdf.version,#
                            encoding = options$pdf.encoding,#
                            compress = options$pdf.compress)#
+        cairo.Swd <- function(name, width, height, ...)#
+            grDevices::cairo_pdf(file = paste(chunkprefix, "pdf", sep = "."),#
+                           width = width, height = height)#
         eps.Swd <- function(name, width, height, ...)#
             grDevices::postscript(file = paste(name, "eps", sep = "."),#
                                   width = width, height = height,#
@@ -119,6 +122,10 @@ makeRweaveLatexCodeRunner <- function(evalFunc = RweaveEvalWithOpt)#
                 devs <- c(devs, list(pdf.Swd))#
                 devoffs <- c(devoffs, list(grDevices::dev.off))#
             }#
+            if (options$cairo) {#
+                devs <- c(devs, list(cairo.Swd))#
+                devoffs <- c(devoffs, list(grDevices::dev.off))#
+            }#
             if (options$eps) {#
                 devs <- c(devs, list(eps.Swd))#
                 devoffs <- c(devoffs, list(grDevices::dev.off))#
@@ -151,6 +158,7 @@ makeRweaveLatexCodeRunner <- function(evalFunc = RweaveEvalWithOpt)#
                 if (options$fig) {#
                     if (options$eps) cat(" eps")#
                     if (options$pdf) cat(" pdf")#
+                    if (options$cairo) cat(" cairo")#
                     if (options$png) cat(" png")#
                     if (options$jpeg) cat(" jpeg")#
                     if (!is.null(options$grdevice)) cat("", options$grdevice)
)
diff --git a/src/library/utils/R/SweaveDrivers.R b/src/library/utils/R/SweaveDrivers.R#
index 7336e7d..ca4b557 100644#
--- a/src/library/utils/R/SweaveDrivers.R#
+++ b/src/library/utils/R/SweaveDrivers.R#
@@ -60,7 +60,7 @@ RweaveLatexSetup <-#
     options <- list(prefix = TRUE, prefix.string = prefix.string,#
                     engine = "R", print = FALSE, eval = TRUE, fig = FALSE,#
-                    pdf = TRUE, eps = FALSE, png = FALSE, jpeg = FALSE,#
+                    pdf = TRUE, cairo=FALSE, eps = FALSE, png = FALSE, jpeg = FALSE,#
                     grdevice = "", width = 6, height = 6, resolution = 300,#
                     term = TRUE, echo = TRUE, keep.source = TRUE,#
                     results = "verbatim",#
@@ -98,6 +98,9 @@ makeRweaveLatexCodeRunner <- function(evalFunc = RweaveEvalWithOpt)#
                            version = options$pdf.version,#
                            encoding = options$pdf.encoding,#
                            compress = options$pdf.compress)#
+        cairo.Swd <- function(name, width, height, ...)#
+            grDevices::cairo_pdf(file = paste(chunkprefix, "pdf", sep = "."),#
+                           width = width, height = height)#
         eps.Swd <- function(name, width, height, ...)#
             grDevices::postscript(file = paste(name, "eps", sep = "."),#
                                   width = width, height = height,#
@@ -119,6 +122,10 @@ makeRweaveLatexCodeRunner <- function(evalFunc = RweaveEvalWithOpt)#
                 devs <- c(devs, list(pdf.Swd))#
                 devoffs <- c(devoffs, list(grDevices::dev.off))#
             }#
+            if (options$cairo) {#
+                devs <- c(devs, list(cairo.Swd))#
+                devoffs <- c(devoffs, list(grDevices::dev.off))#
+            }#
             if (options$eps) {#
                 devs <- c(devs, list(eps.Swd))#
                 devoffs <- c(devoffs, list(grDevices::dev.off))#
@@ -151,6 +158,7 @@ makeRweaveLatexCodeRunner <- function(evalFunc = RweaveEvalWithOpt)#
                 if (options$fig) {#
                     if (options$eps) cat(" eps")#
                     if (options$pdf) cat(" pdf")#
+                    if (options$cairo) cat(" cairo")#
                     if (options$png) cat(" png")#
                     if (options$jpeg) cat(" jpeg")#
                     if (!is.null(options$grdevice)) cat("", options$grdevice)
This R code was used to draw formant graph / calculate Euclidean data in:#
# http://www.languagebits.com/?p=785#
##
# Romeo Mlinar <mlinar [a] languagebits.com>#
##
# License: GPL 3#
##
#
DrawDiphMovementJoinedByLen <- function(flen='s'){#
  ##
  # Draw the starting and the ending vowel of a diphthong,#
  # marked with an arrow.#
  # #
    # Length in title#
    if (flen == 's'){#
      plen <- 'short diphthongs'#
      s.ref.1 <- res.fpi.refs1#
      s.ref.2 <- res.fpi.refs2#
      s.cor.1 <- res.fpi.cors1#
      s.cor.2 <- res.fpi.cors2#
      s.ref <- res.fpi.refs#
    }#
    else {#
      plen <- 'long diphthongs'#
      s.ref.1 <- res.fpi.refl1#
      s.ref.2 <- res.fpi.refl2#
      s.cor.1 <- res.fpi.corl1#
      s.cor.2 <- res.fpi.corl2#
      s.ref <- res.fpi.refl#
    }#
    # Compile title#
    title <- paste("Target movements in corpora",#
                   "\n(", plen, ")", sep='')#
#
     DrawPlotFormants(title=title, sdata=s.ref)#
#
    legend(2600, 830,#
         c('Referent data', 'Corpus data'),#
         cex=0.9,#
         lty=c(1, 2))#
#
     DrawMovement(sdata1=s.ref.1, sdata2=s.ref.2, lt=1)#
     DrawMovement(sdata1=s.cor.1, sdata2=s.cor.2, lt=2)#
  }#
#
DrawMovement <- function(sdata1, sdata2, lt=1){#
  ##
  # Draw the 1st and the 2nd element of the diphthong,#
  # joined by an arrow.#
  ##
  points(sdata1$f2, sdata1$f1, pch=substr(sdata1$ipa, 1, 1))#
  points(sdata2$f2, sdata2$f1, pch=substr(sdata2$ipa, 2, 2))#
  segments(x0=sdata1$f2, y0=sdata1$f1,#
           x1=sdata2$f2, y1=sdata2$f1,#
           par(lty=lt))#
  arrows(sdata1$f2, sdata1$f1,#
         sdata2$f2, sdata2$f1,#
         length  = 0.15)#
  par.default <- par(no.readonly=TRUE)#
}#
#
DiphthongDistance <- function(fq1, fq2){#
  ##
  # Calculate distances between A with coordinates (F1, F2) and#
  # B (F1, F2) for each diphthong.#
  ##
  # fq1 - first target frequencies#
  # fq2 - second target frequencies#
  ##
  if (nrow(fq1) != nrow(fq2)){#
    stop("Number of rows must be same.")#
  }#
#
  # Coordinates#
  x1 <- fq1$f1#
  y1 <- fq1$f2#
#
  x2 <- fq2$f1#
  y2 <- fq2$f2#
#
  #Labels#
#
  ascii <- substr(fq1$ascii, 1, 4)#
  ipa <- substr(fq1$ipa, 1, 3)#
#
  distance <- c()#
#
  for (i in (1:nrow(fq1))){#
    d <- euc.dist2(fd[,i][1], fd[,i][2], fd[,i][3], fd[,i][4])#
    distance <- c(distance, as.numeric(d))#
  }#
#
  frame.distance <- data.frame(ascii=ascii,#
                               ipa=ipa,#
                               dist=round(distance, 2))#
#
  return(frame.distance)#
}#
#
euc.dist2 <- function(x1, y1, x2, y2){#
  ##
  # The Euclidean distance for two dimensions.#
  ##
  return(sqrt((x1-x2)^2+(y1-y2)^2))#
}
getwd()
library(rcmndr)
scatterplot(f1bk~f2bk | Vocal, reg.line=FALSE, smooth=FALSE, spread=FALSE, #
  boxplots=FALSE, span=0.5, by.groups=TRUE, data=prod, xlim=c(16,6), ylim=c(9,3))
scatterplot(f1bk~f2bk | Vocal, reg.line=FALSE, smooth=FALSE, spread=FALSE, #
  boxplots=FALSE, span=0.5, by.groups=TRUE, data=prod, xlim=c(18,4), ylim=c(10,0))
2 + 2
x <- 1:10
y <- 11:20
barplot(x,y, ylim=c(0,15), legend=TRUE, xlab="Test", ylab="Numbers", main="La prueba de fuego")
bwplot(x,y, ylim=c(0,15), legend=TRUE, xlab="Test", ylab="Numbers", main="La prueba de fuego")
plot(x,y, ylim=c(0,15), legend=TRUE, xlab="Test", ylab="Numbers", main="La prueba de fuego")
interaction.plot(x,y, ylim=c(0,15), legend=TRUE, xlab="Test", ylab="Numbers", main="La prueba de fuego")
x + y
summary(x)
summary(y)
x*y^2
2 + 2
2 + 3
2 + 7
2 + 10
2 + 15
source('')
source('/Users/casillas/Desktop/test.R')
2 + 2
source('/Users/casillas/Desktop/test.R')
2 + 2
source('/Users/casillas/Desktop/1/test.R')
source('')
install.packages( 'tikzDevice' )
install.packages( 'tikzDevice',#
  repos='http://r-forge.r-project.org' )
tikz(file = ifelse(onefile, "./Rplots.tex", "./Rplot%03d.tex"),#
    width = 7, height = 7, onefile = TRUE,#
    bg = "transparent", fg = "black", pointsize = 10,#
    standAlone = FALSE, bareBones = FALSE, console = FALSE,#
    sanitize = FALSE,#
    engine = getOption("tikzDefaultEngine"),#
    documentDeclaration = getOption("tikzDocumentDeclaration"),#
    packages, footer = getOption("tikzFooter"))
Example 1 ####################################
#Set up temporary work directory#
td <- tempdir()#
tf <- file.path(td,'example1.tex')#
oldwd <- getwd()#
setwd(td)#
#
# Minimal plot#
tikz(tf,standAlone=TRUE)#
	plot(1)#
dev.off()#
#
# View the output#
tools::texi2dvi(tf,pdf=T)#
system(paste(getOption('pdfviewer'),file.path(td,'example1.pdf')))#
setwd(oldwd)
Minimal plot#
tikz(tf,standAlone=TRUE)#
	plot(1)#
dev.off()#
#
# View the output#
tools::texi2dvi(tf,pdf=T)#
system(paste(getOption('pdfviewer'),file.path(td,'example1.pdf')))
source('/Users/casillas/Dropbox/Public/Tesis/defensa/thesis_defense.tex')
2 + 2
2 + 3
2 + 2
source('/Users/casillas/Desktop/tilde2/tilde.R')
update.packages(checkBuilt=TRUE)
2 + 2
help()
<- 4
b <- 2 + 2
b + 5
b <- c(2,3,4,5,3,4,5,3)
c <- c("one", "two")
plot(c ~ b)
data.frame <- b
summary(data.frame)
head(b)
head(data.frame)
library(xtable)
system('rmd.sh')
system('/Users/casillas/Sites/jvcasill.github.io/rmd.sh')
